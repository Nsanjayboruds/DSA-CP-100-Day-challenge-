name: C/C++ CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build-type: [Debug, Release]
        compiler: [gcc, clang]

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          valgrind \
          cppcheck

    - name: Set up Compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi

    - name: Configure
      run: |
        if [ -f "./configure" ]; then
          ./configure
        elif [ -f "CMakeLists.txt" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }}
        fi

    - name: Build
      run: |
        if [ -f "Makefile" ]; then
          make -j$(nproc)
        elif [ -f "CMakeLists.txt" ]; then
          cmake --build build --config ${{ matrix.build-type }} --parallel
        else
          # Build from array directory directly
          cd array
          make -j$(nproc)
        fi

    - name: Run Tests
      run: |
        if [ -f "Makefile" ] && make check >/dev/null 2>&1; then
          make check
        elif [ -d "array" ]; then
          cd array && [ -f "Makefile" ] && make test
        fi

    - name: Static Analysis
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem array/ || true

    - name: Memory Check
      run: |
        if command -v valgrind >/dev/null 2>&1; then
          find . -name "test_*" -type f -executable -exec valgrind --leak-check=full --error-exitcode=1 {} \; || true
        fi
